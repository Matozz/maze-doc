"use strict";(self.webpackChunkmaze_doc=self.webpackChunkmaze_doc||[]).push([[172],{4248:function(e,t,i){i.r(t),i.d(t,{frontMatter:function(){return m},contentTitle:function(){return p},metadata:function(){return f},toc:function(){return k},Controls:function(){return S},Customization:function(){return g},default:function(){return b}});var r=i(7462),n=i(3366),l=i(7294),a=i(3905),o=i(6923),d=i(7621),s=i.n(d),u=i(321),c=["components"],m={sidebar_position:6},p="Slider",f={unversionedId:"components/Slider",id:"components/Slider",isDocsHomePage:!1,title:"Slider",description:"Sliders reflect a range of values along a bar, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters.",source:"@site/docs/components/Slider.mdx",sourceDirName:"components",slug:"/components/Slider",permalink:"/maze-doc/docs/components/Slider",editUrl:"https://github.com/matozz/maze-doc/blob/master/docs/components/Slider.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Checkbox",permalink:"/maze-doc/docs/components/CheckBox"},next:{title:"Grid",permalink:"/maze-doc/docs/components/Grid"}},k=[{value:"Basic slider",id:"basic-slider",children:[],level:2},{value:"Sizes",id:"sizes",children:[],level:2},{value:"Discrete sliders",id:"discrete-sliders",children:[],level:2},{value:"Customization",id:"customization",children:[],level:2}],S=function(){var e=(0,l.useState)(0),t=e[0],i=e[1];return(0,a.kt)(l.Fragment,null,(0,a.kt)(u.i,{mdxType:"Wrapper"},(0,a.kt)(o.Grid,{direction:"column",spacing:2,mdxType:"Grid"},(0,a.kt)(o.Slider,{value:t,onChange:function(e){return i(e)},label:!0,mdxType:"Slider"}),(0,a.kt)(o.Slider,{disabled:!0,defaultValue:20,mdxType:"Slider"}))))},g=function(){var e=(0,l.useState)("#FF0000"),t=e[0],i=e[1];return(0,a.kt)(l.Fragment,null,(0,a.kt)(u.i,{mdxType:"Wrapper"},(0,a.kt)(o.Grid,{direction:"column",spacing:2,mdxType:"Grid"},(0,a.kt)(o.Slider,{color:"white",min:0,max:360,width:200,onChange:function(e){return i(s()({h:e,s:1,l:.5}).toHexString().toUpperCase())},label:t,sliderStyle:{height:"12px",borderRadius:"4px"},railStyle:{opacity:1,background:"linear-gradient(to right, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%)"},trackStyle:{backgroundColor:"transparent",border:"none"},mdxType:"Slider"}))))},h={toc:k,Controls:S,Customization:g};function b(e){var t=e.components,i=(0,n.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},h,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"slider"},"Slider"),(0,a.kt)("p",null,"Sliders reflect a range of values along a bar, from which users may select a single value. They are ideal for adjusting settings such as volume, brightness, or applying image filters."),(0,a.kt)("h2",{id:"basic-slider"},"Basic slider"),(0,a.kt)("p",null,"Basic sliders allow users to select a value along a subjective range."),(0,a.kt)(S,{mdxType:"Controls"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { useState } from "react";\nimport { Grid, Slider } from "maze-ui";\n\nexport const Controls = () => {\n  const [value, setValue] = useState(0);\n  return (\n    <Grid direction="column" spacing={2}>\n      <Slider value={value} onChange={(value) => setValue(value)} />\n      <Slider disabled defaultValue={20} />\n    </Grid>\n  );\n};\n')),(0,a.kt)("h2",{id:"sizes"},"Sizes"),(0,a.kt)("p",null,"For smaller or larger slider, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"size")," prop."),(0,a.kt)(u.i,{mdxType:"Wrapper"},(0,a.kt)(o.Grid,{direction:"column",spacing:2,mdxType:"Grid"},(0,a.kt)(o.Slider,{size:"small",defaultValue:10,width:200,label:!0,mdxType:"Slider"}),(0,a.kt)(o.Slider,{size:"medium",defaultValue:60,width:200,label:!0,mdxType:"Slider"}),(0,a.kt)(o.Slider,{size:"large",defaultValue:40,width:200,label:!0,mdxType:"Slider"}))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<Slider size="small" defaultValue={10} width={200} label/>\n<Slider size="medium" defaultValue={60} width={200} label/>\n<Slider size="large" defaultValue={40} width={200} label/>\n')),(0,a.kt)("h2",{id:"discrete-sliders"},"Discrete sliders"),(0,a.kt)("p",null,"Discrete sliders can be adjusted to a specific value by referencing its value indicator. You can generate a mark for each step with ",(0,a.kt)("inlineCode",{parentName:"p"},"marks={true}"),"."),(0,a.kt)(u.i,{mdxType:"Wrapper"},(0,a.kt)(o.Grid,{direction:"column",spacing:2,mdxType:"Grid"},(0,a.kt)(o.Slider,{min:20,max:200,step:20,width:200,defaultValue:40,label:!0,marks:!0,mdxType:"Slider"}),(0,a.kt)(o.Slider,{defaultValue:40,step:10,width:200,marks:!0,label:!0,mdxType:"Slider"}),(0,a.kt)(o.Slider,{min:60,max:200,defaultValue:160,width:200,step:20,marks:!0,disabled:!0,mdxType:"Slider"}))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"<Slider min={20} max={200} step={20} width={200} defaultValue={40} label marks />\n<Slider defaultValue={40} step={10} width={200} marks label />\n<Slider min={60} max={200} defaultValue={160} width={200} step={20} marks disabled />\n")),(0,a.kt)("h2",{id:"customization"},"Customization"),(0,a.kt)("p",null,"Here are the example of customizing the component. You can customize the silder by passing ",(0,a.kt)("inlineCode",{parentName:"p"},"sliderStyle")," ",(0,a.kt)("inlineCode",{parentName:"p"},"thumbStyle")," ",(0,a.kt)("inlineCode",{parentName:"p"},"trackStyle")," ",(0,a.kt)("inlineCode",{parentName:"p"},"railStyle")," props."),(0,a.kt)(g,{mdxType:"Customization"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import React, { useState } from "react";\nimport { Grid, Slider } from "maze-ui";\nimport tinycolor from "tinycolor2";\n\nexport const ColorSlider = () => {\n  const [color, setColor] = useState("#FF0000");\n  return (\n    <>\n      <Grid direction="column" spacing={2}>\n        <Slider\n          color="white"\n          min={0}\n          max={360}\n          width={200}\n          onChange={(v) =>\n            setColor(\n              tinycolor({ h: v, s: 1, l: 0.5 }).toHexString().toUpperCase()\n            )\n          }\n          label={color}\n          sliderStyle={{\n            height: "12px",\n            borderRadius: "4px",\n          }}\n          railStyle={{\n            opacity: 1,\n            background:\n              "linear-gradient(to right, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%)",\n          }}\n          trackStyle={{\n            backgroundColor: "transparent",\n            border: "none",\n          }}\n        />\n      </Grid>\n    </>\n  );\n};\n')))}b.isMDXComponent=!0}}]);